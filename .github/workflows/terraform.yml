name: Deploy to AWS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        env:
          TF_LOG: DEBUG
          TF_VAR_db_master_username: ${{ secrets.DB_MASTER_USERNAME }}
          TF_VAR_db_master_password: ${{ secrets.DB_MASTER_PASSWORD }}
        run: terraform plan

      - name: Terraform Apply
        env:
          TF_VAR_db_master_username: ${{ secrets.DB_MASTER_USERNAME }}
          TF_VAR_db_master_password: ${{ secrets.DB_MASTER_PASSWORD }}
        run: terraform apply -auto-approve

      - name: Wait for Aurora Serverless to be available
        id: wait_for_db
        run: |
          CLUSTER_ID="serverless-aurora-pg-cluster"
          check_db_status() {
            aws rds describe-db-clusters --db-cluster-identifier "$CLUSTER_ID" --query 'DBClusters[0].Status' --output text
          }
          STATUS="initializing"
          until [ "$STATUS" == "available" ]; do
            echo "Waiting for Aurora Serverless cluster to be available..."
            STATUS=$(check_db_status)
            if [ "$STATUS" != "available" ]; then
              sleep 30
            fi
          done
          echo "Aurora Serverless cluster is now available."

      - name: Get Aurora Serverless DB Endpoint
        id: get_db_endpoint
        run: |
          ENDPOINT=$(aws rds describe-db-clusters --db-cluster-identifier "serverless-aurora-pg-cluster" --query 'DBClusters[0].Endpoint' --output text)
          echo "DB_ENDPOINT=$ENDPOINT" >> $GITHUB_ENV

      - name: Install PostgreSQL Client
        run: sudo apt-get install -y postgresql-client

      - name: Run SQL Commands
        run: |
          # Connect to the database and run SQL commands from the file
          psql -h ${{ env.DB_ENDPOINT }} -U ${{ secrets.DB_MASTER_USERNAME }} -d galega -f path/to/your/sql-file.sql
        env:
          PGPASSWORD: ${{ secrets.DB_MASTER_PASSWORD }}
