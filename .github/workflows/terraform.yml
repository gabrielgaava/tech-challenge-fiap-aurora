name: Deploy to AWS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Install AWS CLI
        run: sudo apt-get install -y awscli

      - name: Check if RDS Cluster Exists
        id: check_rds
        run: |
          CLUSTER_ID="galega-aurora"
          CLUSTER_EXISTS=$(aws rds describe-db-clusters --query "DBClusters[?DBClusterIdentifier=='$CLUSTER_ID']" --output text)
          if [ -z "$CLUSTER_EXISTS" ]; then
            echo "Cluster does not exist."
            echo "CLUSTER_EXISTS=false" >> $GITHUB_ENV
          else
            echo "Cluster exists."
            echo "CLUSTER_EXISTS=true" >> $GITHUB_ENV
          fi

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        if: env.CLUSTER_EXISTS == 'false'
        env:
          TF_LOG: DEBUG
          TF_VAR_db_master_username: ${{ secrets.DB_MASTER_USERNAME }}
          TF_VAR_db_master_password: ${{ secrets.DB_MASTER_PASSWORD }}
        run: terraform plan

      - name: Terraform Apply
        if: env.CLUSTER_EXISTS == 'false'
        env:
          TF_VAR_db_master_username: ${{ secrets.DB_MASTER_USERNAME }}
          TF_VAR_db_master_password: ${{ secrets.DB_MASTER_PASSWORD }}
        run: terraform apply -auto-approve

      - name: Terraform Output
        id: terraform_output
        run: |
          OUTPUT=$(terraform output -raw endpoint 2>&1)
          if [[ "$OUTPUT" == *"Warning:"* || "$OUTPUT" == *"Error:"* || -z "$OUTPUT" ]]; then
            echo "Error retrieving Terraform output."
            echo "ENDPOINT=" >> $GITHUB_ENV
          else
            echo "ENDPOINT=$OUTPUT" >> $GITHUB_ENV
          fi

      - name: Install PostgreSQL Client
        run: sudo apt-get install -y postgresql-client

      - name: Check if Database Exists
        id: check_db
        env:
          PGHOST: ${{ env.ENDPOINT }}
          PGUSER: ${{ secrets.DB_MASTER_USERNAME }}
          PGPASSWORD: ${{ secrets.DB_MASTER_PASSWORD }}
        run: |
          if psql -h $PGHOST -U $PGUSER -lqt | cut -d \| -f 1 | grep -qw galega_burguer; then
            echo "Database exists."
            echo "DB_EXISTS=true" >> $GITHUB_ENV
          else
            echo "Database does not exist."
            echo "DB_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Create Database (if not exists)
        if: env.DB_EXISTS == 'false'
        env:
          PGHOST: ${{ env.ENDPOINT }}
          PGUSER: ${{ secrets.DB_MASTER_USERNAME }}
          PGPASSWORD: ${{ secrets.DB_MASTER_PASSWORD }}
        run: |
          psql -h $PGHOST -U $PGUSER -c "CREATE DATABASE galega_burguer;"

      - name: Run SQL Script
        env:
          PGHOST: ${{ env.ENDPOINT }}
          PGUSER: ${{ secrets.DB_MASTER_USERNAME }}
          PGPASSWORD: ${{ secrets.DB_MASTER_PASSWORD }}
          PGDATABASE: galega_burguer
        run: |
          psql -h $PGHOST -U $PGUSER -d $PGDATABASE -f scripts/schema.sql
